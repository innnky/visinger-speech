import numpy as np
import soundfile
import torch
from scipy.interpolate import interp1d

import utils
from models import SynthesizerTrn
from sing.remap_phone import singing_phone_to_sequence
from text import symbols
phseq = "SP w o y E x iang sh uo z ai ai j ian a SP f eng y ve m eng h ua SP b a x iang y v n ian l iu x ia SP"
phseq = phseq.split(" ")
phseq = singing_phone_to_sequence(phseq)
phseq = np.array(phseq)
durations = [25,  3, 12,  5, 10,  8, 10,  7, 11,  6, 11, 16,  7, 18, 34,  6, 11, 28,
          7, 26,  8, 10,  7, 35, 14,  3, 19, 16, 27,  7, 11,  6, 26,  9, 31, 20,
         35,  4]
durations = np.array(durations)
f0 = [348.4000, 348.4966, 348.8000, 348.7000, 348.5000, 348.4000, 348.3000,
         348.1746, 348.0424, 347.9000, 347.7780, 347.6458, 347.5136, 347.3814,
         347.2492, 347.1170, 346.9848, 346.8526, 346.7204, 260.1930, 251.2002,
         245.9476, 240.9406, 236.0476, 234.9279, 237.0399, 239.3835, 252.0510,
         284.9984, 312.9896, 335.2191, 345.3565, 348.6304, 348.8626, 349.3896,
         350.3810, 351.4551, 351.4086, 350.5349, 346.6286, 340.0567, 334.1193,
         337.1857, 348.5902, 365.7921, 382.8796, 392.3295, 397.0268, 396.9177,
         395.6889, 394.3803, 388.6551, 368.4286, 330.7410, 341.7408, 360.5358,
         370.6016, 378.1089, 388.7462, 400.2896, 409.7986, 418.2551, 421.7456,
         439.2857, 447.9900, 448.5000, 446.0218, 442.3837, 441.9791, 442.8088,
         443.0841, 435.5363, 405.8551, 379.5420, 407.8735, 430.3973, 439.8887,
         440.4381, 441.7578, 442.9626, 460.4445, 472.1000, 471.7789, 470.5646,
         468.6762, 467.2304, 466.3841, 467.5041, 465.7624, 455.7365, 427.7816,
         390.2079, 365.1079, 362.9075, 365.5352, 373.4635, 379.7878, 384.9605,
         388.7556, 393.4694, 393.3603, 392.4000, 392.6844, 391.7503, 391.3488,
         393.3333, 397.9288, 405.3501, 417.2102, 428.1510, 435.5907, 439.3673,
         439.9873, 439.3229, 439.2122, 439.8118, 441.0109, 442.3367, 443.7973,
         442.7095, 439.8129, 434.6195, 415.4719, 394.3313, 398.3025, 412.3957,
         428.9000, 443.1286, 457.9494, 473.5605, 490.4737, 512.2866, 532.1157,
         535.5698, 532.7705, 532.0123, 529.7295, 528.1887, 527.7565, 526.8456,
         524.4127, 521.2374, 517.2936, 516.6136, 517.7510, 520.5894, 521.7045,
         522.7000, 526.2106, 534.5206, 535.4803, 534.3272, 533.4227, 532.1938,
         530.3190, 526.0723, 522.0605, 518.1700, 515.3873, 516.4578, 518.2673,
         522.8873, 528.6755, 533.3853, 535.8265, 535.8578, 531.3365, 524.3256,
         517.9714, 513.2993, 512.1957, 514.8286, 520.0347, 526.7862, 534.2870,
         539.7587, 541.8315, 539.2109, 532.3392, 523.1238, 513.8674, 508.6655,
         512.6667, 515.5000, 515.6247, 515.4724, 512.9871, 508.5392, 498.3961,
         477.1429, 436.3560, 380.2703, 325.4320, 292.5197, 274.5512, 267.1272,
         263.8333, 262.6968, 262.3510, 262.8154, 263.1798, 263.2558, 262.6052,
         257.8794, 254.7816, 252.8000, 253.6304, 256.7143, 259.9626, 262.3782,
         263.7095, 263.5118, 262.4843, 260.1245, 259.6093, 259.2374, 260.3102,
         260.6746, 261.0390, 261.7551, 262.5517, 262.5000, 262.4483, 262.9415,
         262.0857, 259.5265, 255.8664, 251.3048, 245.1551, 239.5472, 236.1234,
         234.1238, 235.4138, 242.9995, 268.7429, 311.2773, 341.7066, 359.3326,
         362.7270, 361.1560, 357.8537, 355.3394, 355.8383, 359.5143, 366.1007,
         375.0778, 385.5272, 391.1256, 394.8839, 395.7708, 394.4512, 392.4254,
         391.1143, 390.3465, 390.5574, 391.0327, 392.2585, 393.9517, 394.5000,
         394.5603, 393.0093, 387.8143, 382.9018, 383.1163, 385.8143, 391.7535,
         397.4921, 404.5129, 414.7583, 435.4893, 444.9959, 445.9782, 446.0086,
         444.1857, 440.2599, 437.7744, 439.2224, 438.9422, 432.5925, 416.7980,
         385.8333, 372.5789, 372.5674, 378.7367, 387.3995, 397.6360, 415.5800,
         433.5286, 443.3571, 448.1454, 449.5515, 448.9490, 445.3478, 440.1107,
         435.1667, 431.3102, 429.5826, 430.0796, 431.8592, 436.6639, 442.2367,
         448.4698, 451.9456, 452.0354, 448.3154, 441.0490, 433.2204, 428.7211,
         426.4127, 427.6953, 431.0098, 435.2655, 441.2952, 446.8907, 449.9066,
         450.9714, 447.5991, 441.0243, 432.1823, 421.5755, 414.7653, 414.5081,
         415.5095, 416.0973, 415.2041, 412.8678, 406.3973, 390.8748, 363.9270,
         326.3857, 292.1116, 271.5204, 260.7120, 256.2755, 254.6814, 254.0658,
         254.3381, 254.8025, 255.6172, 259.0939, 259.9914, 260.5601, 261.1755,
         260.7111, 260.3467, 259.8823, 259.6179, 259.1535, 258.8163, 259.5506,
         260.3794, 261.2082, 262.1027, 262.5671, 262.9959, 254.8739, 242.2698,
         228.5905, 218.7159, 215.1054, 211.6061, 210.4279, 209.6751, 208.8463,
         208.1175, 207.3830, 205.2497, 203.2621, 201.6528, 201.1184, 202.3936,
         209.0857, 225.9320, 261.6603, 287.7431, 298.9687, 306.3492, 306.0547,
         301.6857, 299.6145, 301.0732, 305.2245, 309.7059, 316.2728, 322.8156,
         328.0333, 332.0032, 333.3061, 333.5197, 332.4719, 331.1374, 329.0798,
         328.2556, 328.4633, 329.2733, 330.0941, 331.0041, 331.4000, 331.1846,
         331.0000, 330.9596, 330.7000, 330.6884, 331.0293, 332.0431, 333.9898,
         338.6444, 349.5252, 353.6864, 354.5608, 353.7946, 352.9980, 351.9689,
         350.6095, 351.0000, 351.2628, 351.4900, 351.0184, 346.1959, 341.0426,
         340.1524, 339.6320, 339.3000, 342.1082, 351.4830, 356.6329, 358.9150,
         357.8047, 356.4930, 353.8640, 351.3961, 348.7419, 347.0490, 346.1152,
         346.3238, 346.9204, 347.6170, 348.4984, 350.0170, 350.9068, 351.4356,
         350.8000, 350.0034, 349.6932, 350.5830, 351.4864, 352.1610, 351.1408,
         349.3952, 344.2569, 336.6469, 326.9342, 313.1438, 297.7435, 283.0100,
         268.3556, 256.1184, 246.1202, 241.4891, 238.2653, 236.2410, 236.1639,
         238.2381, 239.7168, 240.5435, 241.1816, 240.6900, 240.2628, 239.9306,
         239.6048, 240.2676, 240.8320, 241.6909, 244.8685, 250.2769, 255.6696,
         260.1127, 263.6510, 266.1224, 266.3528, 264.6864, 262.2202, 260.0193,
         258.9905, 258.5692, 259.1335, 259.6980, 260.9683, 262.3936, 263.8279,
         264.3778, 264.6100, 264.7422, 262.1737, 252.7397, 234.9694, 224.3127,
         222.8000, 222.9354, 223.2000, 223.1004, 222.6680, 222.1075, 221.6073,
         221.9286, 222.1608, 222.1070, 222.1497, 220.8837, 219.4730, 217.1306,
         218.6857, 222.3095, 224.8184, 225.8540, 223.9068, 220.6156, 216.1039,
         211.1952, 206.0728, 204.8751, 206.4317, 209.5796, 215.0302, 221.0689,
         225.1810, 228.3848, 228.3084, 225.2701, 219.6274, 213.2560, 207.0592,
         202.2476, 199.5011, 199.3510, 201.7084, 206.9150, 211.7497, 216.0671,
         220.3000, 224.2286, 226.2800, 225.5392, 222.6190, 218.8862, 216.8000,
         216.8000, 217.0000, 217.0000]
f0 = f0[:sum(durations)]
f0 = np.array(f0)
pos = 0
for i, d in enumerate(durations):
    if phseq[i] == 0:
        f0[pos:pos+d] = 0
    pos += d

print(f0)
if len(f0)<sum(durations):
    padf0 = np.zeros((sum(durations),))
    padf0[:len(f0)] = f0
    f0 = padf0
f0 = f0

# nonzero_ids = np.where(f0 != 0)[0]
# interp_fn = interp1d(
#     nonzero_ids,
#     f0[nonzero_ids],
#     fill_value=(f0[nonzero_ids[0]], f0[nonzero_ids[-1]]),
#     bounds_error=False,
# )
# pitch = interp_fn(np.arange(0, len(f0)))
#
# pos = 0
# for i, d in enumerate(durations):
#     if d > 0:
#         pitch[i] = np.mean(pitch[pos: pos + d])
#     else:
#         pitch[i] = 0
#     pos += d
# pitch = pitch[: len(durations)]
# pitch = torch.FloatTensor(pitch).unsqueeze(0)
# print(pitch)

# def get_avg(x):
#     if len(x[x != 0]) == 0:
#         return 0
#     else:
#         return np.average(x[x != 0])
#
# phf0 = []
# pos = 0
# for i, d in enumerate(durations):
#
#     phf0.append(get_avg(f0[pos:pos+d]))
#     pos += d
# pitch = np.array(phf0)
pitch = np.array([ 0, 65, 65, 67, 67, 69, 69, 70, 70, 67, 67, 69, 72, 72, 72,  0, 60, 60,
         67, 67, 69, 69, 69, 69,  0, 60, 60, 64, 64, 65, 65, 65, 65, 60, 60, 57,
         57,  0.0])
pitch = 440 * (2 ** ((pitch - 69) / 12))

pitch = torch.FloatTensor(pitch).unsqueeze(0)
print(pitch)
hps = utils.get_hparams_from_file("configs/ms.json")
net_g = SynthesizerTrn(
  len(symbols),
  hps.data.filter_length // 2 + 1,
  hps.data.hop_length,
  hps.data.sampling_rate,
  hps.train.segment_size // hps.data.hop_length,
  n_speakers=hps.data.n_speakers,
  **hps.model)

_ = net_g.eval()

_ = utils.load_checkpoint("/Volumes/Extend/下载/vits-main/ckpts/G_400800.pth", net_g, None)


text_norm = torch.LongTensor(phseq)
x_tst = text_norm.unsqueeze(0)
x_tst_lengths = torch.LongTensor([text_norm.size(0)])
spk = torch.LongTensor([1])
manual_f0 = torch.FloatTensor(f0).unsqueeze(0)
manual_dur = torch.LongTensor(durations).unsqueeze(0)

result = net_g.infer(x_tst, x_tst_lengths, noise_scale=.667, noise_scale_w=0.8, sid=spk,
                                length_scale=1,pitch_control=pitch,manual_duration=manual_dur,manual_f0=manual_f0)
audio = result[0][0, 0].data.float().numpy()
soundfile.write("samples/sing.wav", audio, 44100)